Metadata-Version: 2.4
Name: sldk
Version: 0.1.0
Summary: Scrolling LED Dev Kit - A development framework for CircuitPython LED matrix displays
Author: SLDK Contributors
License: MIT
Project-URL: Homepage, https://github.com/yourusername/sldk
Project-URL: Bug Tracker, https://github.com/yourusername/sldk/issues
Keywords: led,matrix,display,circuitpython,esp32,scrolling
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Embedded Systems
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.18; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: ruff>=0.0.250; extra == "dev"
Provides-Extra: simulator
Requires-Dist: pygame>=2.0.0; extra == "simulator"
Requires-Dist: pillow>=8.0.0; extra == "simulator"
Requires-Dist: numpy>=1.19.0; extra == "simulator"
Dynamic: license-file

# SLDK - Scrolling LED Dev Kit

A lightweight, async-first development framework for creating scrolling LED matrix applications with CircuitPython. Designed for ESP32 and other memory-constrained devices with extensible hardware support.

## Features

- üöÄ **Multi-Hardware Support** - MatrixPortal S3, Adafruit Matrix Portal, custom displays, and more
- üîÑ **Async Throughout** - Built on asyncio for responsive, non-blocking operation
- üñ•Ô∏è **Desktop Development** - Full LED simulator for development without hardware
- üåê **Web UI** - Optional web interface for configuration (can be disabled)
- üì¶ **Easy Deployment** - Built-in .mpy compilation for production
- üé® **Flexible Animations** - Extensible animation and content system
- üîå **Extensible Hardware** - Easy addition of new CircuitPython-compatible displays

## Installation

### For Development (Desktop)

```bash
pip install sldk[simulator]
```

### For CircuitPython (ESP32)

Copy the `sldk` folder to your device's `lib` directory, or use the built-in deployment tools:

```python
from sldk.deploy import export_mpy
await export_mpy("./myapp", "/Volumes/CIRCUITPY/lib")
```

## Quick Start

```python
from sldk import SLDKApp, ScrollingText

class HelloWorld(SLDKApp):
    async def setup(self):
        """Initialize your app."""
        self.message = ScrollingText("Hello, SLDK!", color=0xFF0000)
    
    async def update_data(self):
        """Update any data (called periodically)."""
        pass  # No data updates needed for hello world
    
    async def prepare_display_content(self):
        """Return content to display."""
        return self.message

# Run the app
if __name__ == "__main__":
    import asyncio
    app = HelloWorld()
    asyncio.run(app.run())
```

## Hardware Support

SLDK is designed to work with any CircuitPython-compatible LED matrix display. There are two ways to add hardware support:

### 1. Application-Specific Hardware (Recommended for Custom Setups)

Override the `create_display()` method in your application:

```python
from sldk import SLDKApp
from sldk.display import DisplayInterface

class MyCustomDisplay(DisplayInterface):
    def __init__(self):
        # Your custom hardware initialization
        pass
        
    async def initialize(self):
        # Initialize your specific hardware
        pass
        
    # Implement required methods...

class MyApp(SLDKApp):
    async def create_display(self):
        """Override to use custom hardware."""
        return MyCustomDisplay()
```

### 2. Contributing Hardware Support to SLDK

For widely-used hardware, contribute support to the library:

```python
# sldk/src/sldk/display/devices/my_device.py
from ..interface import DisplayInterface

class MyDeviceDisplay(DisplayInterface):
    """Support for My Custom LED Matrix."""
    
    def __init__(self, width=64, height=32, **kwargs):
        # Device-specific initialization
        pass
```

Then register it in the hardware detection:

```python
# sldk/src/sldk/display/hardware.py
def detect_hardware():
    """Auto-detect available hardware."""
    try:
        from .devices.my_device import MyDeviceDisplay
        return MyDeviceDisplay()
    except ImportError:
        pass
    # ... other hardware checks
```

### Supported Hardware

| Hardware | Status | Notes |
|----------|--------|--------|
| **Adafruit MatrixPortal S3** | ‚úÖ Built-in | Default ESP32-S3 board |
| **Adafruit Matrix Portal** | üöß Planned | Original Matrix Portal |
| **Raspberry Pi** | üìã Planned | With rpi-rgb-led-matrix |
| **Generic SPI Matrices** | üìã Planned | Via displayio |
| **Your Hardware** | üîå [Contribute!](#contributing-hardware) | |

## Architecture

SLDK uses a three-process architecture for optimal performance:

1. **Display Process** - Handles all rendering at consistent frame rate
2. **Data Update Process** - Manages background data fetching  
3. **Web Server Process** - Provides configuration UI (optional)

On memory-constrained devices, the system gracefully degrades, prioritizing the display process.

## Memory Usage

- Core library: <50KB
- With web server: +30KB
- With animations: +15KB

Total memory footprint can be kept under 100KB for basic applications.

## Documentation

See the [docs](docs/) directory for detailed documentation.

## Examples

Check out the [examples](examples/) directory for more complex applications.

## Status

‚úÖ **Phase 1 Complete** - Core Display System

Current implementation includes:
- **Display System**: Hardware/simulator abstraction with unified API
- **Content Classes**: ScrollingText, StaticText, custom DisplayContent
- **Application Framework**: Three-process async architecture (display, data, web)
- **Platform Detection**: Automatic CircuitPython vs desktop detection
- **Memory Management**: Automatic feature degradation based on available memory
- **Examples**: Hello World and Animation Demo applications

### Working Features
- ‚úÖ Unified display that works on both hardware and simulator
- ‚úÖ Content queue with automatic cycling
- ‚úÖ Async throughout for ESP32 compatibility
- ‚úÖ Memory-aware process spawning
- ‚úÖ Basic text rendering and scrolling
- ‚úÖ Custom animation support

### Next Phases
- üöß **Phase 2**: Hardware Abstraction (multiple device support, auto-detection)
- üìã **Phase 3**: Web Framework (settings UI, status pages)
- üìã **Phase 4**: OTA Updates (remote deployment)
- üìã **Phase 5**: Advanced Animations (transitions, effects)
- üìã **Phase 6**: Package Distribution (PyPI, CircuitPython bundle)

## Contributing Hardware

SLDK welcomes hardware contributions! To add support for new devices:

### Step 1: Create Device Driver

Create a new file in `sldk/src/sldk/display/devices/`:

```python
# your_device.py
from ..interface import DisplayInterface

class YourDeviceDisplay(DisplayInterface):
    """Support for Your LED Matrix Device."""
    
    def __init__(self, width=64, height=32, **kwargs):
        super().__init__()
        self._width = width
        self._height = height
        # Device-specific initialization
        
    @property
    def width(self):
        return self._width
        
    @property
    def height(self):
        return self._height
        
    async def initialize(self):
        """Initialize your hardware."""
        # Your initialization code
        pass
        
    async def clear(self):
        """Clear the display."""
        # Your clear implementation
        pass
        
    async def show(self):
        """Update the physical display."""
        # Your show implementation
        pass
        
    async def set_pixel(self, x, y, color):
        """Set a single pixel."""
        # Your pixel implementation
        pass
```

### Step 2: Register Device

Add detection logic to `sldk/src/sldk/display/hardware.py`:

```python
def detect_hardware():
    """Auto-detect available hardware."""
    
    # Check for your device
    try:
        # Device-specific detection logic
        import your_device_module
        return YourDeviceDisplay()
    except ImportError:
        pass
        
    # Existing device checks...
```

### Step 3: Test and Submit

1. Test with the examples: `python examples/hello_world.py`
2. Add documentation and examples for your device
3. Submit a pull request with your changes

### Hardware Requirements

For CircuitPython compatibility, your device should support:

- **displayio**: Standard CircuitPython display framework
- **Memory Constraints**: Work with <200KB available RAM
- **Async Operations**: Non-blocking initialization and updates
- **Color Depth**: Minimum 16-bit color (RGB565)

Popular hardware targets:
- Adafruit MatrixPortal series
- ESP32 with LED matrices
- Raspberry Pi with GPIO matrices  
- Custom CircuitPython boards
- Generic SPI/I2C displays

## License

MIT License - see LICENSE file for details.
